---
title: "Data Wrangling"
subtitle: "STAT 231 Blog Project"
author: "Gloria Wu, Justyce Williams, Ben Snyderman"
date: today
format: pdf
linestretch: 1.15
highlight-style: arrow
---

```{r}
#| label: setup
#| include: FALSE

knitr::opts_chunk$set(
  # display code as types
  tidy = FALSE, 
  # slightly smaller code font
  size = "small",
  # do not display messages in PDF
  message = FALSE,
  # set default figure width and height
  fig.width = 5, fig.height = 3) 

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')

# load packages
library(tidyverse)
library(rvest)
library(ggplot2)
library(stringr)
library(purrr)
library(robotstxt)
library(tidytext)
library(tidyr)
library(dplyr)
library(spotifyr)
library(tidytuesdayR)
library(geniusr)
library(httr)
library(jsonlite)
```

## Variables


## Wrangling

```{r}
#| label: load & basic wrangling

## check if we can scrape
# paths_allowed("https://www.billboard.com/charts/hot-100/")
paths_allowed("https://genius.com")

paths_allowed("https://spotify.com")
spotify<-readRDS("data/tt_spotify_songs.Rds")

# paths_allowed("https://spotify.com")

## tidy tuesday spotify data
spotify_songs <- readRDS("data/tt_spotify_songs.Rds")
# filter out the most popular songs
# I did 87 because it was the closest I could get to 100
#88 would only give us 92 which is under 100, I would rather us at as least 100 than under 100
songs_top100 <- spotify_songs |>
  filter(track_popularity >= 87) |>
  select(- track_album_id, - track_album_release_date,
         - playlist_name, -playlist_id, -playlist_id) |>
  group_by(track_id)

songs_top100singles<- songs_top100|>
   distinct(track_name, .keep_all = TRUE)


  # some songs are listed multiple times, merge those rows
  ## figure this out
  # group_by(track_id, track_name) |>
  # summarize(track_id = track_id,
  #           track_name = track_name,
  #           track_artist = track_artist,
  #           track_popularity = mean(track_popularity),
  #           track_album_name = track_album_name,
  #           danceability = danceability,
  #           energy = energy,
  #           loudness = loudness,
  #           mode = mode,
  #           speechiness = speechiness,
  #           acousticness = acousticness,
  #           instrumentalness = instrumentalness,
  #           liveness = liveness,
  #           valence = valence,
  #           tempo = tempo,
  #           duration_ms = duration_ms)
```

```{r}

#Genius Lyric Data

genius_token(bk0ijdi-fnVwz5XIpGRPtnLTay0aPfDgw_nAnQBejj9svAAULIkzDCLh9BzaL3Lw)

#Will need to figure out how to make this a full data frame eventually 
#lyrics<- data.frame(
 # c(artisit)
#)

#lyrics
lyrics<- get_lyrics_search(artist_name = "Kanye West",
                  song_title = "Good Morning") %>% 
  # get lyric bigrams
  unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
  # look for good morning
  filter(bigram == "good morning") %>% 
  # count bigram frequency
  nrow()


```



```{r}
#| label: (attempt) load spotify data

## spotify credentials
##Sys.setenv(SPOTIFY_CLIENT_ID = "03faef051fef46ed8ecc6f2153a55206")
##Sys.setenv(SPOTIFY_CLIENT_SECRET = "475255efd20c45f88e50275490895841")

## tokens necessary for use 
#access_token <- get_spotify_access_token()

## get playlist details
#playlist <- get_playlist_tracks("6UeSakyzhiEt4NB3UAd6NQ")

## get individual track audio features
# track_ids <- playlist$track.id
# track_audio_features <- get_track_audio_features(track_ids,
#                                                  authorization = access_token)
```


```{r}
#| label: scrape genius lyrics 

## chatGPT prompt: scrape lyrics from genius.com

genius_access_token <- "W28ITauMuo8HwVUStqe7xzv0EepDLZm3rHvYkkAHyhrp-0Y-FSdm7GDqFqCYS-fA"

## pre-allocate space
playlist_lyrics <- tibble(track_name = rep(NA_character_, 100),
                          track_id = rep(NA_real_, 100),
                          lyrics = rep(NA_character_, 100))

## iterate through to get lyrics
for (i in 2:100){
  # scrape lyrics
  song_title <- playlist$track.name[i]
  search_song <- GET("https://api.genius.com/search",
                     query = list(q = song_title),
                     add_headers(Authorization = paste("Bearer", genius_access_token)))
  song_info <- content(search_song, as = "parsed", type = "application/json")
  song_url <- song_info$response$hits[[1]]$result$url
  lyrics <- read_html(song_url) |>
    html_element("div[data-lyrics-container='true']") |>
    html_text2()
  
  # add to dataset
  playlist_lyrics$track_name[i] <- song_title
  playlist_lyrics$track_id[i] <- playlist$track.id[i]
  playlist_lyrics$lyrics[i] <- lyrics
}

## need to manually clean
## need to manually scrape:
  # 1. luther
```



```{r}
#| label: wrangling for 


```



```{r}
#| label: wrangling for 

         
```

```{r}
#| label: save final objects


```

## Sources
