---
title: "Network Map w/ Additional Visuals"
author: "Justyce Williams"
---

```{r}
#| label: setup
#| include: false

# Improve digit display and NA display for kable tables
options(scipen = 1, knitr.kable.NA = "")

# Load necessary packages
# load packages
library(tidyverse)
library(rvest)
library(ggplot2)
library(stringr)
library(purrr)
library(robotstxt)
library(tidytext)
library(tidyr)
library(dplyr)
library(spotifyr)
library(tidytuesdayR)
library(geniusr)
library(httr)
library(jsonlite)
library(broom)
library(GGally)
library(rgenius)
library(igraph)
library(ggraph)
library(tidygraph)
library(sf)
library(leaflet)
library(ggspatial)
library(RColorBrewer)
library(kableExtra)

# Load datasets
artists<- readRDS("data/networkdata.Rds")
popularity<- readRDS("data/officaltabledata.Rds")
hometowns<- readRDS("data/NorthSouthAmericaTotal")

```

## Introduction

To explore connections between artists among top Spotify tracks, we used network science to construct and analyze a collaboration network. In this network, each node represents a unique artist, and edges connect artists who have worked together before. By modeling these relationships as a network, we can observe how artists cluster together, which artists are central to the network, and how collaboration patterns vary across the music industry.

Network analysis helps us do more than just count how many times artists worked together, it allows us  to actually see how those collaborations are structured. By looking at the network, we can figure out which artists play important roles, like being central connectors between groups or part of particular circles that collaborate a lot. For example, we might expect pop artists to be part of big, connected clusters because they tend to collaborate more often, while artists from smaller or more niche genres might be more on the edges of the network. Given the use of this *spotifyr* dataset, when filter for top our tracks, a majority of the songs are pop genre, thus we will see many connections in the dominating pop genre circles. 

To create the network, we first scrapped and downloaded information from Wikipedia to gain an understanding of which artist have crossed paths professionally. Then that data was filtered to include only unique artist-to-artist collaborations. Then, we used visualizations using  degree centrality to highlight popular artists amongst those groups to examine the overall connectivity of the network. Through this analysis, we hope to gain insight into how collaborative behavior influences visibility, crossovers with genre, and the formation of musical communities or pods. 

To further contextualize these relationships, we added a geographic layer: an interactive map showing each artist’s hometown. The Artist in this dataset come from UUSa, Canada, and South America is shaded by the number of artists from that area, and users can hover to explore who’s from where. This data required wikipedia site pulling and location extraction from page scrolling. Once collected, these hometown countries and provinces were merged with spatial features geometry data from *geodata* package using level 1, adminstrative level to gain fillings for the leaflet map consisting of states, provinces, and department borders within contient borders. 

To complement the visual analysis, we created a table that counts how often each artist was mentioned in the dataset — either as a main or featured artist. This provides a fast way to identify who appears the most across top tracks, and gives insight into both popularity and industry presence.


###Visuals
*Map* - To display hometowns of artist
*Table* - To show what artist has had the most top tracks in spotify
*Network* - To show which artist have worked together (and more specifically who 
are the most connected/ hottest collaborators)

### Variables 
Number of Variables used: 
Sources:
1. Tidytuesday Spotify dataset by @ttspotify
2. Wikipedia Sites 

- `track_artist`: list of all artist who's songs have made it to the top 100 songs 
- `collabArtist`: the names of artist (exclusively artist listed in the top 100) who have worked with (in any capacity) with track artist
- `track_popularity`: spotify used metrics such as total number of plays, recent numer of plays, user enegments and other metrics to give songs a popularity score from 0 to 100 
- `track_name`: name of the song
- `hometown`: hometown is distinct from born place, hometown is where the artist grew up
- `Weight`: how many artist were raised in a given location 
- `geometry`: spatial data that stored in polygons (boundary areas across the globe)


```{r}
## Find Your Favorite Artists Hometown
#| label: Find Your Artist's Hometown
#| message: false
#| out-width: 100%
#| fig-height: 10

#Have to create color palette first for weight coloring 
palette<- colorNumeric(
  palette = brewer.pal(n= 8, name="Greens"),
  domain= hometowns$Weight,
  na.color= "transparent"
)

#Zoom in or out Map for user
Mapplot1<- leaflet(hometowns)|>
  addTiles()|> #This although redundant wouldn't actually show the map without it
  addProviderTiles("CartoDB.DarkMatter")|>
  addPolygons(
    fillColor= ~palette(Weight),
    fillOpacity = 0.5,
    color="black",
    label = ~ track_artist, #tells you which artist are some there
    highlightOptions = highlightOptions(
    weight= 3,# want thick borders
    bringToFront = TRUE #Makes the states/provinces with data in them hightlight on the map 
    ))

Mapplot1

```

#

This map reinforces how geographic origin often intersects with collaborative opportunity. Artists from major cultural hubs — like California, Texas, Ontario, and Antioquia — appear more frequently and often show higher connectivity in the network. That makes sense: location can shape access to recording infrastructure, scene culture, and collaboration opportunities.

In other words, where you’re from can shape who you work with, and ultimately, how visible you are.




```{r}
# Table Displaying Popularity by Artist 
#| label: Who's the Most Popular Spotify Artist ?
#| message: false
#| out-width: 100%
#| fig-height: 10

#TopArtisit 
#Number of times theyre songs have made it to the top 
TopArtist<- popularity|>
 arrange(desc(Count))|>
 slice(1:10)

#table 
tableTopArtist <- TopArtist |>
  select(track_artist, Count, genre, track_popularity) |>
  kable(
    caption = "<span style='color:black;font-weight:bold;'>Most Popular Artist</span>", #creates a nice title 
    format = "html",
    digits = 2,
    col.names = c("Artist","Billboard Hits", "Genre", "Popularity Spotify Scores")) |>
    kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "dark"),
    full_width = TRUE,
    font_size = 14
  ) |>
  column_spec(1:4, background = "black", color = "white", border_right = FALSE, border_left = FALSE) |>
  row_spec(0, background = "black", color = "white") |>
  row_spec(1:nrow(TopArtist), extra_css = "border-bottom: none;")

tableTopArtist

```



```{r}
## Network Map for Artist Collaboration : Degree Centrality 
#| label: Network Map: Degree Centrality 
#| message: false
#| out-width: 100%
#| fig-height: 10

#Getting rid of all the repetitive information 
artists<- artists|>
  distinct(track_artist, collabArtist, .keep_all = TRUE)

# Create the Nodes and Edges for a visble Graph 
artistcollab_network <- artists |>
      select(track_artist, collabArtist, genre) |>
      as_tbl_graph(directed=FALSE)

gorder(artistcollab_network) #Number of Nodes 
gsize(artistcollab_network) # Number of Edges 

# Transfer genre info to nodes for ggplot to read it correctly 
artistcollab_network <- artistcollab_network |>
  activate(nodes) |>
  left_join(
    artists |> 
      select(name = track_artist, genre, collabArtist) |> 
      distinct(name, .keep_all = TRUE),
    by = "name"
  )

#Filtering to make graph more readability by decreasing data points 
#Reporting the ones with the most connections for a more interesting data 
#adding degree information to know which artist is most connected
artistcollab_network<- artistcollab_network|>
  activate(nodes)|>
  mutate(degree= centrality_degree())


artistcollab_network_Sliced<- artistcollab_network|>
  activate(nodes)|>
  arrange(desc(degree))|>
  slice(1:50)

```




```{r}
## Network Map for Artist Collaboration : Degree Centrality 
#| label: Network Map: Degree Centrality 
#| message: false
#| out-width: 100%
#| fig.width:  20
#| fig-height: 20

Networkplot<- artistcollab_network_Sliced |>
  mutate(degree = centrality_degree())|>
  ggraph(layout = "linear", circular = TRUE)+
  geom_edge_link( alpha= 0.5, color = "#228B22")+
  geom_node_point(size= 8, color="#1874CD")+
  geom_node_text(aes(label=name, size= degree), repel= TRUE, color= "white")+
  theme(panel.background = element_rect(fill = "black"),
        plot.background = element_rect(fill = "black"),
        legend.position = "none"
    )

Networkplot

```





#Analysis 




#Analysis 





##Conclusions 


# Sources 
*https://stackoverflow.com/questions/15999877/correctly-color-vertices-in-r-igraph *https://r-charts.com/colors/ best for color picking 

